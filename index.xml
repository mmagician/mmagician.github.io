<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>mmagician</title><link>https://mmagician.github.io/</link><description>Recent content on mmagician</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 01 Aug 2022 11:03:00 +0200</lastBuildDate><atom:link href="https://mmagician.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>From one {point,poly} to multi {point,poly}</title><link>https://mmagician.github.io/posts/poly_commit/</link><pubDate>Mon, 01 Aug 2022 11:03:00 +0200</pubDate><guid>https://mmagician.github.io/posts/poly_commit/</guid><description>This is my first entry here, so I would highly appreciate any feedback.
This is not an introduction to PCS. Instead, I will use some statements from vanilla KZG and build upon these for multiple points and multiple polynomials. If you are new to PCS, I recommend the intro by Dankrad Feist or the original KZG paper.
Polynomial committment schemes The primary focus of this article is to explore various flavours of KZG polynomial commitment scheme:</description></item><item><title>Arkworks</title><link>https://mmagician.github.io/arkworks/</link><pubDate>Wed, 27 Jul 2022 11:05:21 +0200</pubDate><guid>https://mmagician.github.io/arkworks/</guid><description>Arkworks arkworks on GitHub
Small start My first contribution to arkworks was improving the documentation of finite fields. Many public structs and traits were at that time without any description and it was difficult, especially for newcomers to the arkworks ecosystem like myself, to grasp the complexity, let alone use the APIs. One had to resort to reading the source code!
Later I added doctests (a code example included in the documentation of that item, which actually executes when you cargo test) and fixed some CI jobs, so that the repo appeared all nice and green.</description></item><item><title>About</title><link>https://mmagician.github.io/about/</link><pubDate>Wed, 11 Aug 2021 19:14:50 +0200</pubDate><guid>https://mmagician.github.io/about/</guid><description>About I currently work as a Research Engineer at the Web3 Foundation, coding up cryptographic primitives and seeing how they can be integrated into substrate.
On a side I contribute to arkworks and run a few validator nodes.
When I&amp;rsquo;m not coding, I&amp;rsquo;m probably out doing some sports or reading.</description></item><item><title>Hard Math Game</title><link>https://mmagician.github.io/hardmathgame/</link><pubDate>Wed, 11 Aug 2021 19:14:50 +0200</pubDate><guid>https://mmagician.github.io/hardmathgame/</guid><description>Hard Math Game Download from Google Play Store
(and no, I don&amp;rsquo;t need a new name)
Story When I was a teenager, I remember our math teacher would show us a game at the end of the class if we had extra time. He would project a series of slides onto a screen. On each slide, there were four squares, each with an integer on it. The goal of the game was coming up with a sequence of operations (only addition and multiplication were allowed) that would use all the four numbers and arrive at 24.</description></item><item><title>Validator</title><link>https://mmagician.github.io/validator/</link><pubDate>Wed, 11 Aug 2021 19:14:50 +0200</pubDate><guid>https://mmagician.github.io/validator/</guid><description>Network Validators It turns out that unwanted DevOps experience and on-call rotations have proven useful, after all!
Having deployed to AWS &amp;amp; Hetzner in my previous roles made it fairly easy to spin up a couple of validators.
I&amp;rsquo;m involved in validation services via two separate entities:
AMJ Stake, which aims to provide a trusted validator for both Kusama and Polkadot mmagician (myself), so far participating in the Kusama 1KV with two nodes Kusama As mmagician, I&amp;rsquo;m running two validators, which are both part of the 1K Validator Program.</description></item><item><title>ZK Sudoku Game</title><link>https://mmagician.github.io/smoothie/</link><pubDate>Wed, 11 Aug 2021 19:14:50 +0200</pubDate><guid>https://mmagician.github.io/smoothie/</guid><description>Smoothie - Sudoku Made Out Of The Hard mathematIcal Elements Zero Knowledge Proofs are still mysterious and hard to explain to non-cryptographers. I am building a user friendly platform to demonstrate the principle behind ZKPs as a game between a prover &amp;amp; a verifier.
To this end, I am using a well-known game of sudoku: users will solve the sudoku game in their browser and generate a proof of correctness. The verifier will be a smart contract that can verify the proofs and issue acknowledgements for valid solutions.</description></item></channel></rss>